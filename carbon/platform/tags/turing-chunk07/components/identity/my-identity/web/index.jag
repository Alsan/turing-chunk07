<%

var caramel = require('caramel');
var util = require("util/utility.jag");

var i18n = util.initI18N();

var log = new Log();

function index(){
	
    try{
        require('authenticationHandler.jag');

    }catch(e){
        log.error(e);
        response.sendRedirect("login.jag?e=1&error=AuthenticationFail");
        return;
    }
    

	var errorJson = util.getSuccessErrorJson(request, i18n);
    caramel.render({
	    messages : i18n.localize("messages"),
        error: errorJson
    });
    
    initAuthenticationProtocol();
}

index();



function initAuthenticationProtocol(){
	var authConfig = readFile("authentication/auth_config.json");
	if(authConfig.EnableSAMLSSOLogin){
		//If only saml enabled, we do initialize the saml flow. 
		var samlConfig = authConfig.saml_config;
		var Properties = Packages.java.util.Properties;
		var props = new Properties();
		for each(var prop in samlConfig){
			if (samlConfig.hasOwnProperty(prop)) {
				props.setProperty(samlConfig[prop]);
			}
		}
		
		var sSOAgentConfigs = Packages.org.wso2.carbon.identity.sso.agent.util.SSOAgentConfigs;
		sSOAgentConfigs.initConfig(props);
		
		var sys = Packages.java.lang.System;
		log.info("---------------------------" + sys.getProperty("carbon.home"));
	}
	
}

%>